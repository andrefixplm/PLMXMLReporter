# -*- coding: utf-8 -*-
"""
Script de Distribui√ß√£o - SmartPLM PLMXML Reporter
Facilita a cria√ß√£o de pacotes para distribui√ß√£o
"""

import os
import sys
import shutil
import zipfile
from datetime import datetime
from config_app import get_info_completa, DISTRIBUICAO

def criar_pasta_distribuicao():
    """Cria pasta para distribui√ß√£o"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    pasta_dist = f"distribuicao_{timestamp}"
    
    if not os.path.exists(pasta_dist):
        os.makedirs(pasta_dist)
    
    return pasta_dist

def copiar_arquivos_essenciais(pasta_destino):
    """Copia arquivos essenciais para distribui√ß√£o"""
    arquivos_essenciais = [
        'src/',
        'gui_runner.py',
        'xslt_generator_runner.py',
        'iniciar_interface.bat',
        'iniciar_xslt_generator.bat',
        'iniciar_interface.sh',
        'README_INTERFACE_GRAFICA.md',
        'README_XSLT_GENERATOR.md',
        'GUIA_XSLT_PERSONALIZADO.md',
        'GUIA_HTML_COMPLETO.md',
        'config_app.py'
    ]
    
    for arquivo in arquivos_essenciais:
        if os.path.exists(arquivo):
            if os.path.isdir(arquivo):
                shutil.copytree(arquivo, os.path.join(pasta_destino, arquivo))
            else:
                shutil.copy2(arquivo, pasta_destino)
            print(f"‚úÖ Copiado: {arquivo}")

def criar_arquivo_instalacao(pasta_destino):
    """Cria arquivo de instala√ß√£o"""
    info = get_info_completa()
    
    instalacao_content = f"""# SmartPLM PLMXML Reporter - Instala√ß√£o

## Informa√ß√µes da Aplica√ß√£o
- **Empresa:** {info['empresa']['nome']}
- **Slogan:** {info['empresa']['slogan']}
- **Aplica√ß√£o:** {info['aplicacao']['nome']} v{info['aplicacao']['versao']}
- **Desenvolvedor:** {info['desenvolvedor']['nome']}
- **Copyright:** {info['aplicacao']['copyright']}

## Requisitos do Sistema
- Python 3.7 ou superior
- Tkinter (geralmente inclu√≠do com Python)
- Bibliotecas padr√£o do Python

## Instala√ß√£o

### Windows
1. Certifique-se de ter Python instalado
2. Execute `iniciar_interface.bat` para a interface principal
3. Execute `iniciar_xslt_generator.bat` para o gerador XSLT

### Linux/Mac
1. Certifique-se de ter Python 3 instalado
2. Execute: `python3 gui_runner.py` para a interface principal
3. Execute: `python3 xslt_generator_runner.py` para o gerador XSLT

## Funcionalidades

### Interface Principal
- Processamento de m√∫ltiplos arquivos PLMXML
- Parsers b√°sico e avan√ßado
- Gera√ß√£o de relat√≥rios HTML
- Logs em tempo real

### Gerador XSLT
- An√°lise de estrutura PLMXML
- Busca de campos espec√≠ficos
- Gera√ß√£o autom√°tica de c√≥digo XSLT
- Gera√ß√£o de HTML completo
- Suporte a campos wt9_

## Suporte
- **Email:** {info['empresa']['email']}
- **Website:** {info['empresa']['website']}
- **Desenvolvedor:** {info['desenvolvedor']['nome']}

## Licen√ßa
{info['aplicacao']['copyright']}
"""
    
    with open(os.path.join(pasta_destino, 'INSTALACAO.md'), 'w', encoding='utf-8') as f:
        f.write(instalacao_content)
    
    print("‚úÖ Criado: INSTALACAO.md")

def criar_arquivo_licenca(pasta_destino):
    """Cria arquivo de licen√ßa"""
    licenca_content = f"""# Licen√ßa SmartPLM

## {get_info_completa()['aplicacao']['copyright']}

### Termos de Uso

1. **Licen√ßa de Uso:** Esta aplica√ß√£o √© fornecida "como est√°" para uso comercial e n√£o comercial.

2. **Redistribui√ß√£o:** √â permitida a redistribui√ß√£o da aplica√ß√£o, desde que:
   - Mantenha todos os arquivos originais
   - Inclua este arquivo de licen√ßa
   - N√£o remova os cr√©ditos da SmartPLM e do desenvolvedor

3. **Modifica√ß√µes:** √â permitido modificar a aplica√ß√£o para uso interno, desde que:
   - Mantenha os cr√©ditos originais
   - N√£o distribua vers√µes modificadas sem autoriza√ß√£o

4. **Responsabilidade:** A SmartPLM n√£o se responsabiliza por:
   - Perda de dados durante o uso
   - Problemas de compatibilidade
   - Danos indiretos causados pelo uso

5. **Suporte:** O suporte t√©cnico est√° dispon√≠vel atrav√©s de:
   - Email: {get_info_completa()['empresa']['email']}
   - Website: {get_info_completa()['empresa']['website']}

### Informa√ß√µes do Desenvolvedor
- **Nome:** {get_info_completa()['desenvolvedor']['nome']}
- **Email:** {get_info_completa()['desenvolvedor']['email']}

### Vers√£o da Aplica√ß√£o
- **Nome:** {get_info_completa()['aplicacao']['nome']}
- **Vers√£o:** {get_info_completa()['aplicacao']['versao']}
- **Descri√ß√£o:** {get_info_completa()['aplicacao']['descricao']}

Data de Cria√ß√£o: {datetime.now().strftime('%d/%m/%Y')}
"""
    
    with open(os.path.join(pasta_destino, 'LICENSE'), 'w', encoding='utf-8') as f:
        f.write(licenca_content)
    
    print("‚úÖ Criado: LICENSE")

def criar_zip_distribuicao(pasta_destino):
    """Cria arquivo ZIP para distribui√ß√£o"""
    info = get_info_completa()
    nome_zip = f"{info['distribuicao']['nome_pacote']}_v{info['distribuicao']['versao']}.zip"
    
    with zipfile.ZipFile(nome_zip, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(pasta_destino):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, pasta_destino)
                zipf.write(file_path, arcname)
    
    print(f"‚úÖ Criado: {nome_zip}")
    return nome_zip

def main():
    """Fun√ß√£o principal de distribui√ß√£o"""
    print("üöÄ Iniciando cria√ß√£o do pacote de distribui√ß√£o...")
    print("=" * 60)
    
    # Informa√ß√µes da aplica√ß√£o
    info = get_info_completa()
    print(f"üì¶ Empresa: {info['empresa']['nome']}")
    print(f"üì¶ Aplica√ß√£o: {info['aplicacao']['nome']} v{info['aplicacao']['versao']}")
    print(f"üì¶ Desenvolvedor: {info['desenvolvedor']['nome']}")
    print("=" * 60)
    
    # Criar pasta de distribui√ß√£o
    pasta_dist = criar_pasta_distribuicao()
    print(f"üìÅ Pasta criada: {pasta_dist}")
    
    # Copiar arquivos essenciais
    print("\nüìã Copiando arquivos essenciais...")
    copiar_arquivos_essenciais(pasta_dist)
    
    # Criar arquivos de documenta√ß√£o
    print("\nüìù Criando documenta√ß√£o...")
    criar_arquivo_instalacao(pasta_dist)
    criar_arquivo_licenca(pasta_dist)
    
    # Criar ZIP de distribui√ß√£o
    print("\nüóúÔ∏è Criando arquivo ZIP...")
    nome_zip = criar_zip_distribuicao(pasta_dist)
    
    print("\n" + "=" * 60)
    print("‚úÖ Distribui√ß√£o criada com sucesso!")
    print(f"üì¶ Arquivo: {nome_zip}")
    print(f"üìÅ Pasta: {pasta_dist}")
    print("=" * 60)
    
    print("\nüìã Pr√≥ximos passos para distribui√ß√£o:")
    print("1. Teste o pacote em um ambiente limpo")
    print("2. Verifique se todos os arquivos est√£o inclu√≠dos")
    print("3. Compartilhe o arquivo ZIP com os usu√°rios")
    print("4. Forne√ßa instru√ß√µes de instala√ß√£o")
    
    return nome_zip

if __name__ == "__main__":
    main() 